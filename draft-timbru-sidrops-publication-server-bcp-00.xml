<?xml version="1.0" encoding="utf-8"?>
<!-- name="GENERATOR" content="github.com/mmarkdown/mmark Mmark Markdown Processor - mmark.miek.nl" -->
<rfc version="3" ipr="trust200902" docName="draft-timbru-sidrops-publication-server-bcp-00" submissionType="IETF" category="bcp" xml:lang="en" xmlns:xi="http://www.w3.org/2001/XInclude" obsoletes="8416" indexInclude="false" consensus="true">

<front>
<title abbrev="RPKI Publication Server Operations">RPKI Publication Server Best Current Practices</title><seriesInfo value="draft-timbru-sidrops-publication-server-bcp-00" status="bcp" name="Internet-Draft"></seriesInfo>
<author initials="T." surname="Bruijnzeels" fullname="Tim Bruijnzeels"><organization>NLnet Labs</organization><address><postal><street></street>
</postal><email>tim@nlnetlabs.nl</email>
<uri>https://www.nlnetlabs.nl/</uri>
</address></author><author initials="T." surname="de Kock" fullname="Ties de Kock"><organization>RIPE NCC</organization><address><postal><street></street>
</postal><email>tdekock@ripe.net</email>
</address></author><date/>
<area>Internet</area>
<workgroup></workgroup>

<abstract>
<t>This document describes best current practices for operating an RFC 8181
RPKI Publication Server and its rsync and RRDP (RFC 8182) public
repositories.</t>
</abstract>

</front>

<middle>

<section anchor="requirements-notation"><name>Requirements notation</name>
<t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;,
&quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;NOT RECOMMENDED&quot;, &quot;MAY&quot;, and &quot;OPTIONAL&quot; in
this document are to be interpreted as described in BCP 14 <xref target="RFC2119"></xref>
<xref target="RFC8174"></xref> when, and only when, they appear in all capitals, as shown here.</t>
</section>

<section anchor="introduction"><name>Introduction</name>
<t><xref target="RFC8181"></xref> describes the RPKI Publication Protocol that is used between
RPKI Certificate Authorities (CAs) and their Publication Repository server.
The server is responsible for handling publication requests sent by the
CAs, called Publishers in this context, and ensuring that their data is
made available to RPKI Relying Parties (RPs) in in public rsync and RRDP
<xref target="RFC8182"></xref> publication points.</t>
<t>In this document we will describe best current practices based on the
operational experience of several implementers and operators.</t>
</section>

<section anchor="glossary"><name>Glossary</name>
<table>
<thead>
<tr>
<th>Term</th>
<th>Description</th>
</tr>
</thead>

<tbody>
<tr>
<td>Publication Server</td>
<td><xref target="RFC8181"></xref> Publication Repository server</td>
</tr>

<tr>
<td>Publishers</td>
<td><xref target="RFC8181"></xref> Publishers (Certificate Authorities)</td>
</tr>

<tr>
<td>RRDP Repository</td>
<td>Public facing <xref target="RFC8182"></xref> RRDP repository</td>
</tr>

<tr>
<td>Rsync Repository</td>
<td>Public facing rsync server</td>
</tr>
</tbody>
</table></section>

<section anchor="publication-server"><name>Publication Server</name>
<t>The Publication Server is responsible for handling the server side of
the <xref target="RFC8181"></xref> Publication Protocol. It is responsible for generating
the content for the public facing RRDP and Rsync Repositories. It is
strongly RECOMMENDED that these functions are separated from serving the
repository content.</t>

<section anchor="availability"><name>Availability</name>
<t>While the repository content MUST be made highly available to any RP in
the world, the Publication Server only needs to be accessible by its
publishers. Dependent on the specific setup this may allow for additional
access restrictions in this context. For example, access could be limited
to known source IP addresses and rate limits may be imposed.</t>
<t>If the Publication Server is not available for some reason, then this will
impact Publishers in that they will not be able to publish any updated
RPKI objects in that time. The most immediate impact of this is that the
publisher will not be able to update its ROAs, ASPAs or BGPSec Router
Certificates during this outage. Thus, it will not be able to authorise
changes in its routing operations at this time. If the outage persists
for a longer period, then the RPKI manifests and CRLs published will
expire, resulting in the rejecting of CA publication points by RPs.</t>
<t>For this reason the Publication Server MUST be operated in a highly
available fashion. Maintenance windows SHOULD be planned and communicated
to publishers, so that they can avoid - if possible - that changes in
published RPKI objects will be needed during these windows.</t>
</section>
</section>

<section anchor="rrdp-repository"><name>RRDP Repository</name>
<t>In this section we will elaborate on the following recommendations:</t>

<ul>
<li>Use unique hostname (do not share fate with rsync)</li>
<li>Use CDN if possible</li>
<li>Use randomized paths for Snapshot and Delta Files</li>
<li>Limit size of Notification File</li>
<li>Combine deltas to limit size of Notification File</li>
<li>Timing of publication of Notification File</li>
</ul>

<section anchor="unique-hostname"><name>Unique Hostname</name>
<t>It is RECOMMENDED that the public RRDP Repository URIs use a hostname
that is different from both the <xref target="RFC8181"></xref> service<em>uri used by publishers,
and the hostname used in rsync URIs (sia</em>base).</t>
<t>Using a unique hostname will allow the operator to use dedicated
infrastructure and/or a Content Delivery Network for its RRDP content
without interfering with the other functions.</t>
</section>

<section anchor="content-delivery-network"><name>Content Delivery Network</name>
<t>If possible, it is strongly RECOMMENDED that a Content Delivery Network
is used to serve the RRDP content. Care MUST BE taken to ensure that
the Notification File is not cached for longer than 5 minutes, unless
the back-end RRDP Repository is unavailable, in which case it is RECOMMENDED
that stale files are served.</t>
<t>If a CDN is used, then it is likely that it will cache 404s for files that
are not found on the back-end server. Because of this the Publication
Server SHOULD use randomized, unpredictable, paths for Snapshot and Delta
Files to avoid that the CDN can be tricked into caching such 404s for
future updates.</t>
<t>Alternatively, the Publication Server can clear the CDN cache for any
new files that it publishes.</t>
</section>

<section anchor="limit-size-notification-file"><name>Limit Size Notification File</name>
<t>The size of the RRDP Notification File can have a big impact on RRDP
operations. If this file becomes too large, then it can easily result in
network congestion if the RRDP Repository does not use any CDN, or in
high costs if it does.</t>
<t><xref target="RFC8182"></xref> stipulated that any deltas that, when combined with all more
recent delta, will result in the total size of deltas exceeding the size
of the snapshot MUST be excluded to avoid that Relying Parties download
more data than necessary.</t>
<t>In addition to the restriction described above we RECOMMEND that the
Notification File size is limited by removing access delta files that
have been available for more than 30 minutes. As RP typically refresh
their caches every 10 minutes, this will ensure that deltas are available
for vast majority of RPs, while limiting the size of the Notification
File.</t>
<t>Furthermore, we RECOMMEND that Publication Servers with many, e.g. 1000s
of, Publishers ensure that they do not produce Delta Files more frequently
than once per minute. A possible approach for this is that any publication
request sent by a Publisher to the Server SHOULD be published immediately
if the last delta was produced more than one minute ago. Otherwise the
request can be handled by server immediately, but the content change is
staged for up to 1 minute and combined with changes from other Publishers
in a single RRDP Delta File.</t>
</section>

<section anchor="sticky-balancing-and-notification-file-timing"><name>Sticky Balancing and Notification File Timing</name>
<t>Notification Files SHOULD NOT be available to RPs before the referenced
snapshot and delta files are available.</t>
<t>This means that in case a load balancing setup is used, then care SHOULD
be taken to either ensure that RPs that fetch a Notification File from
one node, will also be served from the same node where the referenced
snapshot and delta files are available. Alternatively, snapshot and delta
files can be pushed out to all nodes first, and notification files are
pushed out second.</t>
</section>
</section>

<section anchor="rsync-repository"><name>Rsync Repository</name>
<t>In this section we will elaborate on the following recommendations:</t>

<ul>
<li>Use symlinks to provide consistent content</li>
<li>Use deterministic timestamps for files</li>
<li>Load balancing and testing</li>
</ul>

<section anchor="consistent-content"><name>Consistent Content</name>
<t>A naive implementation of the Rsync Repository could lead to the contents
of the repository being changed while RPs are transferring files. This
can lead to unpredictable, and inconsistent results. While modern RPs will
treat such inconsistencies as a &quot;Failed Fetch&quot; (<xref target="RFC9286"></xref>), this
situation is best avoided.</t>
<t>One way to ensure that rsyncd serves connected clients (RPs) a consistent
view of the repository, is by configuring the rsyncd 'module' path to map
a symlink that has the current state of the repository.</t>
<t>Whenever there is an update:</t>

<ul>
<li>write the complete updated repository into a new directory</li>
<li>fix the timestamps of files (see next section)</li>
<li>change the symlink to point to the new directory</li>
</ul>
<t>This way rsyncd does not need to be restarted, and since symlinks are
resolved when clients connect, any connected RPs will get the content
from the old directory containing the consistent, but previous, state.</t>
<t>The old directories can then be removed when no more RP are fetching that
data. Because it's hard to determine this in practice, Rsync Repositories
MAY assume that it is safe to do so after 1 HOUR.</t>
</section>

<section anchor="deterministic-timestamps"><name>Deterministic Timestamps</name>
<t>Timestamps can be used in recursive rsync fetches to determine which
files have changed. Therefore, it's important that timestamps do not
change for files that did not change in content.</t>
<t>We therefore RECOMMEND that the following deterministic heuristics are
used to set the timestamps of objects in case they are re-written to
disk:</t>

<ul>
<li>For CRLs use the value of &quot;this update&quot;.</li>
<li>For manifests use the value of &quot;this update&quot;.</li>
<li>For other RPKI Signed Objects use &quot;not before&quot; from the embedded EE
Certificate. Note that &quot;signing time&quot; could in theory be a more
accurate value for this, but since this is optional it cannot be
assumed to be present. And a preference for &quot;signing time&quot; with a
fallback to &quot;not before&quot; would result in inconsistencies between
objects that could be surprising.</li>
<li>For CA and BGPSec Router Certificates use &quot;not before&quot;</li>
</ul>
</section>

<section anchor="load-balancing-and-testing"><name>Load Balancing and Testing</name>
<t>It is RECOMMENDED that the Rsync Repository is load tested to ensure that
it can handle the requests by all RPs in case they need to fall back from
using RRDP (as is currently preferred).</t>
<t>Because Rsync exchanges rely on sessions over TCP there is no need for
'sticky' load balancing in case multiple rsyncd servers are used. As long
as they each provide a consistent view, and are updated more frequently
than the typical refresh rate for rsync repositories used by RPs.</t>
<t>It is RECOMMENDED to set the &quot;max connections&quot; to a value that a single
node can handle, and that this value is re-evaluated as the repository
changes in size over time.</t>
<t>The number of rsyncd servers needed is a function of the number of RPs,
their refresh rate, and the &quot;max connections&quot; used. All of these values
are subject to change over time so we cannot give clear recommendations
here, except to restate the we RECOMMEND the load testing is done and
these values are re-evaluated over time.</t>
</section>
</section>

<section anchor="acknowledgements"><name>Acknowledgements</name>
<t>This document is the result of many informal discussions between
implementers. Proper acknowledgements will follow.</t>
</section>

</middle>

<back>
<references><name>Normative References</name>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8181.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8182.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.9286.xml"/>
</references>

</back>

</rfc>
